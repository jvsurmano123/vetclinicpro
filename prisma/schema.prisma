generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String    @default("USER")
  clinicId       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  clinic         Clinic?   @relation(fields: [clinicId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Clinic {
  id           String        @id @default(cuid())
  name         String
  address      String?
  phone        String?
  email        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  alerts       Alert[]
  appointments Appointment[]
  patients     Patient[]
  payments     Payment[]
  users        User[]
}

model Patient {
  id           String        @id @default(cuid())
  name         String
  species      String
  breed        String?
  age          Int?
  weight       Float?
  clinicId     String
  ownerId      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  owner        Owner         @relation(fields: [ownerId], references: [id])
  clinic       Clinic        @relation(fields: [clinicId], references: [id])
}

model Owner {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  patients  Patient[]
}

model Appointment {
  id        String   @id @default(cuid())
  date      DateTime
  type      String
  status    String
  notes     String?
  clinicId  String
  patientId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient   Patient  @relation(fields: [patientId], references: [id])
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  payment   Payment?
}

model Payment {
  id            String      @id @default(cuid())
  amount        Float
  status        String
  appointmentId String      @unique
  clinicId      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  clinic        Clinic      @relation(fields: [clinicId], references: [id])
}

model Alert {
  id        String   @id @default(cuid())
  type      String
  message   String
  priority  String
  clinicId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
}
